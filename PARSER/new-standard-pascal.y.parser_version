%{
/*
 * grammar.y
 *
 * Pascal grammar in Yacc format, based originally on BNF given
 * in "Standard Pascal -- User Reference Manual", by Doug Cooper.
 * This in turn is the BNF given by the ANSI and ISO Pascal standards,
 * and so, is PUBLIC DOMAIN. The grammar is for ISO Level 0 Pascal.
 * The grammar has been massaged somewhat to make it LALR, and added
 * the following extensions.
 *
 * constant expressions
 * otherwise statement in a case
 * productions to correctly match else's with if's
 * beginnings of a separate compilation facility
 */

#include <stdio.h>
#include "node.h"

/* Called by yyparse on error.  */

int res = 0, err = 0;
nodeType AST, TEMP;
void yyerror (char const *s)
{
	extern char *yytext;
	extern int line_no;
	fprintf(stderr, "[Syntactic analyzer error] %s at line %d symbol '%s'\n", s, line_no, yytext);
	res = 1;
	err++;
}

void shift()
{
	fprintf(stderr, "Shift\n");
}

void reduced(int rule)
{
	fprintf(stderr, "Reduced to rule %d\n", rule);
}

//%type <nodeType> program identifier_list declarations type standard_type subprogram_declarations subprogram_declaration subprogram_head arguments parameter_list compound_statement optional_statements statement_list statement variable tail procedure_statement expression_list expression simple_expression term factor addop mulop num relop
//%token ARRAY ASSIGNMENT COLON COMMA DO DOT DOTDOT ELSE END EQUAL ERROR FUNCTION GE GOTO GT IF IN LBRAC LE LPAREN LT MINUS NOT NOTEQUAL OF PBEGIN PLUS PROCEDURE PROGRAM RBRAC RPAREN SEMICOLON SLASH STAR STARSTAR STRING THEN UPARROW VAR WHILE NIDENTIFIER INTEGER REAL INVALIDSYM
//%token <text> CHARACTER_STRING IDENTIFIER EXPOPRST
//%token <ival> DIGSEQ 
//%token <fval> REALNUMBER
%}

%union
{
        int ival;
	float fval;
        char* text;
	nodeType nval;
}

%token ARRAY ASSIGNMENT COLON COMMA DO DOT DOTDOT ELSE END EQUAL ERROR FUNCTION GE GOTO GT IF IN LBRAC LE LPAREN LT MINUS NOT NOTEQUAL OF PBEGIN PLUS PROCEDURE PROGRAM RBRAC RPAREN SEMICOLON SLASH STAR STARSTAR STRING THEN UPARROW VAR WHILE NIDENTIFIER INTEGER REAL INVALIDSYM
%token <text> CHARACTER_STRING IDENTIFIER EXPOPRST
%token <ival> DIGSEQ 
%token <fval> REALNUMBER
%token EMPTY

%type <nval> program identifier_list declarations type standard_type subprogram_declarations subprogram_declaration subprogram_head arguments parameter_list compound_statement optional_statements statement_list statement variable tail procedure_statement expression_list expression simple_expression term factor addop mulop num relop
%%

program : PROGRAM IDENTIFIER LPAREN identifier_list RPAREN SEMICOLON declarations subprogram_declarations compound_statement DOT
	{
		fprintf(stderr, "1----%s\n", $2);
		AST = new_node(PROGRAM);
		AST = new_family_5(AST, new_node_t(IDENTIFIER, $2), $4, $7, $8, $9);
	}
	| error
	;

identifier_list : IDENTIFIER
	{
		fprintf(stderr, "2----%s\n", $1);
		$$ = new_node_t(IDENTIFIER, $1);
	}
	| identifier_list COMMA IDENTIFIER
	{
		fprintf(stderr, "3----%s\n", $3);
		$$ = new_r_sibling($1, new_node_t(IDENTIFIER, $3));
	}
	| error
	;


declarations : declarations VAR identifier_list COLON type SEMICOLON
	{
		$$ = new_family_3(new_node(VAR), $1, $3, $5);
	}
	| error
	|
	{
		$$ = new_node(EMPTY);
	}
	;


type : standard_type
	{
		$$ = $1;
	}
	| ARRAY LBRAC num DOTDOT num RBRAC OF type
	{
		$$ = new_family_3(new_node(ARRAY), $3, $5, $8);
	}
	| error
	;


standard_type : INTEGER
	{
		$$ = new_node(INTEGER);
	}
	| REAL
	{
		$$ = new_node(REAL);
	}
        | STRING
	{
		$$ = new_node(STRING);
	}
	;


subprogram_declarations : subprogram_declarations subprogram_declaration SEMICOLON
	{
		$$ = new_r_sibling($1, $2);
	}
	|
	{
		$$ = new_node(EMPTY);
	}
	;


subprogram_declaration :subprogram_head declarations compound_statement
	{
		$$ = new_r_sibling($1, $2);
		new_r_sibling($2, $3);
	}
	;

subprogram_head : FUNCTION IDENTIFIER arguments COLON standard_type SEMICOLON
	{
		//fprintf(stderr, "%s\n", $2);
		TEMP = new_node(FUNCTION);
		$$ = new_family_3(TEMP, new_node_t(IDENTIFIER, $2), $3, $5);
	}
	| PROCEDURE IDENTIFIER arguments SEMICOLON
	{
		//fprintf(stderr, "%s\n", $2);
		TEMP = new_node(PROCEDURE);
		$$ = new_family_2(TEMP, new_node_t(IDENTIFIER, $2), $3);
	}
	;


arguments : LPAREN parameter_list RPAREN
	{
		$$ = $2;
	}
	;


parameter_list : identifier_list COLON type
	{
		$$ = new_r_sibling($1, $3);
	}
	| parameter_list SEMICOLON identifier_list COLON {shift();} type
	{
		$$ = new_r_sibling($1, $3);
		new_r_sibling($3, $5);
	}
	;


compound_statement : PBEGIN optional_statements END
	{
		$$ = $2;
	}
	|
	{
		$$ = new_node(EMPTY);
	}
	;


optional_statements : statement_list
	{
		$$ = $1;
	}
	;


statement_list : statement
	{
		$$ = $1;
	}
	| statement_list SEMICOLON statement
	{
		$$ = new_r_sibling($1, $3);
	}
	;


statement : variable ASSIGNMENT expression
	{
		$$ = new_family_2(new_node(ASSIGNMENT), $1, $3);
	}
	| procedure_statement
	{
		$$ = $1;
	}
	| compound_statement
	{
		$$ = $1;
	}
	| IF expression THEN statement ELSE statement
	{
		$$ = new_family_3(new_node(IF), $2, $4, $6);
	}
	| WHILE expression DO statement
	{
		$$ = new_family_2(new_node(WHILE), $2, $4);
	}
	;


variable : IDENTIFIER tail
	{
		fprintf(stderr, "4----%s\n", $1);
		$$ = new_r_sibling(new_node_t(IDENTIFIER, $1), $2);
	}
	;


tail     : LBRAC expression RBRAC tail
	{
		$$ = new_r_sibling($2, $4);
	}
	|
	{
		$$ = new_node(EMPTY);
	}
	;


procedure_statement : IDENTIFIER
	{
		//fprintf(stderr, "%s\n", $1);
		$$ = new_node_t(IDENTIFIER, $1);
	}
	| IDENTIFIER LPAREN expression_list RPAREN
	{
		//fprintf(stderr, "%s\n", $1);
		$$ = new_r_sibling(new_node_t(IDENTIFIER, $1), $3);
	}
	| error
	;


expression_list : expression
	{
		$$ = $1;
	}
	| expression_list COMMA expression
	{
		$$ = new_r_sibling($1, $3);
	}
	;


expression : simple_expression
	{
		$$ = $1;
	}
	| simple_expression relop simple_expression
	{
		$$ = new_family_2($2, $1, $3);
	}
	;


simple_expression : term
	{
		$$ = $1;
	}
	| simple_expression addop term
	{
		$$ = new_family_2($2, $1, $3);
	}
	;


term : factor
	{
		$$ = $1;
	}
	| term mulop factor
	{
		$$ = new_family_2($2, $1, $3);
	}
	;


factor : IDENTIFIER tail
	{
		fprintf(stderr, "5----%s\n", $1);
		$$ = new_r_sibling(new_node_t(IDENTIFIER, $1), $2);
	}
	| IDENTIFIER LPAREN expression_list RPAREN
	{
		//fprintf(stderr, "%s\n", $1);
		$$ = new_r_sibling(new_node_t(IDENTIFIER, $1), $3);
	}
	| num
	{
		$$ = $1;
	}
	| LPAREN expression RPAREN
	{
		$$ = $2;
	}
	| NOT factor
	{
		$$ = new_l_child(new_node(NOT), $2);
	}
	| CHARACTER_STRING
	{
		$$ = new_node_t(CHARACTER_STRING, $1);
	}
	;


addop : PLUS
	{
		$$ = new_node(PLUS);
	}
	| MINUS
	{
		$$ = new_node(MINUS);
	}
	;


mulop : STAR
	{
		$$ = new_node(STAR);
	}
	| SLASH
	{
		$$ = new_node(SLASH);
	}
	;


num : DIGSEQ
	{
		$$ = new_node_i(DIGSEQ, $1);
	}
	| REALNUMBER
	{
		$$ = new_node_f(REALNUMBER, $1);
	}
	| EXPOPRST
	{
		$$ = new_node_t(EXPOPRST, $1);
	}
	| MINUS DIGSEQ
	{
		TEMP = new_node(DIGSEQ);
		$$ = new_r_sibling(TEMP, new_node_i(DIGSEQ, $2)); 
	}
	| MINUS REALNUMBER
	{
		TEMP = new_node(REALNUMBER);
		$$ = new_r_sibling(TEMP, new_node_f(REALNUMBER, $2));
	}
	| MINUS EXPOPRST
	{
		TEMP = new_node(EXPOPRST);
		$$ = new_r_sibling(TEMP, new_node_t(EXPOPRST, $2));
	}
	;


relop : LT
	{
		$$ = new_node(LT);
	}
	| GT
	{
		$$ = new_node(GT);
	}
	| EQUAL
	{
		$$ = new_node(EQUAL);
	}
	| LE
	{
		$$ = new_node(LE);
	}
	| GE
	{
		$$ = new_node(GE);
	}
	| NOTEQUAL
	{
		$$ = new_node(NOTEQUAL);
	}
	;


%%
int main(int argc, char** argv) {
	fprintf(stderr, "open file.\n");
	if(argc>1 && freopen(argv[1],"r",stdin)==NULL){
		return 1;
	}

	fprintf(stderr, "call yyparse\n\n********** START  PARGING **********\n\n");

	yyparse();

	fprintf(stderr, "after call yyparse, res = %d, err = %d.\n", res, err);
	
	print_AST(AST);

	if (res==0)
		fprintf(stderr, "SUCCESS\n");
	else
		fprintf(stderr, "ERROR\n");
}
#include "lex.yy.c"
